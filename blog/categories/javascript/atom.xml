<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | I'm Brian Chu]]></title>
  <link href="http://www.brianchu.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.brianchu.com/"/>
  <updated>2015-03-22T06:37:51-07:00</updated>
  <id>http://www.brianchu.com/</id>
  <author>
    <name><![CDATA[Brian Chu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An Interesting Module Pattern: the Sealed Module]]></title>
    <link href="http://www.brianchu.com/blog/2013/08/18/an-interesting-module-pattern-the-sealed-module/"/>
    <updated>2013-08-18T06:00:00-07:00</updated>
    <id>http://www.brianchu.com/blog/2013/08/18/an-interesting-module-pattern-the-sealed-module</id>
    
    <content type="html"><![CDATA[An interesting way to share private state across components of modules in JavaScript: <!-- more -->  
(credit goes to [this article](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html))

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">module</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_private</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">_private</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">_private</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_seal</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">_seal</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">_seal</span> <span class="o">||</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">delete</span> <span class="nx">module</span><span class="p">.</span><span class="nx">_private</span><span class="p">;</span>
</span><span class='line'>    <span class="k">delete</span> <span class="nx">module</span><span class="p">.</span><span class="nx">_seal</span><span class="p">;</span>
</span><span class='line'>    <span class="k">delete</span> <span class="nx">module</span><span class="p">.</span><span class="nx">_unseal</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_unseal</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">_unseal</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">_unseal</span> <span class="o">||</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">_private</span> <span class="o">=</span> <span class="nx">_private</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">_seal</span> <span class="o">=</span> <span class="nx">_seal</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">_unseal</span> <span class="o">=</span> <span class="nx">_unseal</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="c1">// permanent access to _private, _seal, and _unseal</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">module</span><span class="p">;</span>
</span><span class='line'><span class="p">}(</span><span class="nx">module</span> <span class="o">||</span> <span class="p">{}));</span>
</span></code></pre></td></tr></table></div></figure>

`_unseal` must be called by a function (probably some sort of loader function) that was initialized before `_seal` was called (so that `_unseal` will be present in its closure scope).

For example:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">loadScript</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">scriptUrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">module</span><span class="p">.</span><span class="nx">_unseal</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">scriptUrl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="s2">&quot;loaded&quot;</span> <span class="o">||</span>
</span><span class='line'>          <span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="s2">&quot;complete&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">module</span><span class="p">.</span><span class="nx">_seal</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">module</span><span class="p">.</span><span class="nx">_seal</span><span class="p">()</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">append</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt by Example - A Tutorial for JavaScript's Task Runner]]></title>
    <link href="http://www.brianchu.com/blog/2013/07/11/grunt-by-example-a-tutorial-for-javascripts-task-runner/"/>
    <updated>2013-07-11T16:35:00-07:00</updated>
    <id>http://www.brianchu.com/blog/2013/07/11/grunt-by-example-a-tutorial-for-javascripts-task-runner</id>
    
    <content type="html"><![CDATA[What's Grunt used for? Automating front-end and JavaScript workflow tasks. Refreshing the browser when you change a script. Minifying and concatenating. Running tests. Think `rake` and `guard`, if you're coming from the Ruby world.

Enter Grunt by Example! A blow-by-blow tutorial. Just the way I like it. Let's dive in.

<!-- more -->

The catch - Grunt configuration files can be fairly convoluted at first glance, usually due to the fact that developers add more and more steps to their workflow over time.

Grunt is just a task runner. Every unit of functionality that you would want is usually achieved with a separate npm package (a grunt &#8220;plugin&#8221;).

`npm search grunt` to view literally every grunt plugin available.

Get the command line interface: `npm install -g grunt-cli`

Add the actual grunt task runner as a development dependency to your project (`&#8211;save-dev` adds the package as a dependency to `package.json`):
`npm install &#8211;save-dev grunt`

Let&#8217;s follow a process of gradual expansion.

Create an empty `Gruntfile.js` file in your project root. This will contain all of your task configuration.

Let&#8217;s say that the first task we want to add to our workflow is to be able to concatenate several JavaScript files into one. Let&#8217;s say those files are all in the `scripts/` sub-directory. We&#8217;d want to do this before deploying a website, for example.

Run `npm install &#8211;save-dev grunt-contrib-concat`.

Let&#8217;s look at our Gruntfile configured with just this one task.

A quick preview of the result before we look at the code. After setting up our configuration object, running `grunt concat`, `grunt concat:dist`, or `grunt build` in the shell in the project root will all do the same thing: concatenate all scripts in the `scripts` sub-directory into a single script called `main.js`.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Grunt is just JavaScript running in node, after all...</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// All upfront config goes in a massive nested object.</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="c1">// You can set arbitrary key-value pairs.</span>
</span><span class='line'>    <span class="nx">distFolder</span><span class="o">:</span> <span class="s1">&#39;dist&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// You can also set the value of a key as parsed JSON.</span>
</span><span class='line'>    <span class="c1">// Allows us to reference properties we declared in package.json.</span>
</span><span class='line'>    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">// Grunt tasks are associated with specific properties.</span>
</span><span class='line'>    <span class="c1">// these names generally match their npm package name.</span>
</span><span class='line'>    <span class="nx">concat</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Specify some options, usually specific to each plugin.</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Specifies string to be inserted between concatenated files.</span>
</span><span class='line'>        <span class="nx">separator</span><span class="o">:</span> <span class="s1">&#39;;&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="c1">// &#39;dist&#39; is what is called a &quot;target.&quot;</span>
</span><span class='line'>      <span class="c1">// It&#39;s a way of specifying different sub-tasks or modes.</span>
</span><span class='line'>      <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// The files to concatenate:</span>
</span><span class='line'>        <span class="c1">// Notice the wildcard, which is automatically expanded.</span>
</span><span class='line'>        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;scripts/*.js&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="c1">// The destination file:</span>
</span><span class='line'>        <span class="c1">// Notice the angle-bracketed ERB-like templating,</span>
</span><span class='line'>        <span class="c1">// which allows you to reference other properties.</span>
</span><span class='line'>        <span class="c1">// This is equivalent to &#39;dist/main.js&#39;.</span>
</span><span class='line'>        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= distFolder %&gt;/main.js&#39;</span>
</span><span class='line'>        <span class="c1">// You can reference any grunt config property you want.</span>
</span><span class='line'>        <span class="c1">// Ex: &#39;&lt;%= concat.options.separator %&gt;&#39; instead of &#39;;&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span> <span class="c1">// The end of grunt.initConfig</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// We&#39;ve set up each task&#39;s configuration.</span>
</span><span class='line'>  <span class="c1">// Now actually load the tasks.</span>
</span><span class='line'>  <span class="c1">// This will do a lookup similar to node&#39;s require() function.</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-concat&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Register our own custom task alias.</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;concat&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

You might still be confused about the notion of a &#8220;target.&#8221; More on that:

Let&#8217;s say there&#8217;s another set of files you want to concatenate. All script files in `deploy/` should be concatenated into `deploy.js` (in the project root). Let&#8217;s say we want that task to look like `grunt concat:deploy`

To achieve that, our concat task now looks like:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">concat</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">separator</span><span class="o">:</span> <span class="s1">&#39;;&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;scripts/*.js&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;&lt;%= distFolder %&gt;/main.js&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">deploy</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// options that are specific to the &#39;deploy&#39; target</span>
</span><span class='line'>    <span class="c1">// target-level options override task-level options</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// separator:&#39;;;;&#39; would override the parent setting</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">src</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;deploy/*.js&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">dest</span><span class="o">:</span><span class="s1">&#39;deploy.js&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

If you run `grunt concat:dist,` all scripts in `scripts/` will be concatenated into  `dist/main.js`. `grunt concat:dist` runs the concat task with the config settings that are specified under `dist`. `grunt concat:deploy` runs the concat task with the config settings specified under `deploy`. `grunt concat` will run concat with *both* targets, separately. The parent-level `options` setting specifies config settings that are shared by both targets. `grunt build` is an alias for `grunt concat`.

Now let&#8217;s tackle a common, yet relatively complicated task.

Let&#8217;s get Grunt to run certain tasks in response to changes in files. An extremely powerful and common use-case: reloading a static website when you change its HTML/CSS/JS. It&#8217;s fairly complicated and it&#8217;s usually something you just copy-and-paste. Here are the steps to setting this up using the `watch` and `connect` plugins, along with the `connect-livereload` (a piece of Connect middleware that is not grunt-specific). For this example, let&#8217;s assume that your static website is located in the `client/` folder.

Install the three plugins:  
`npm install &#8211;save-dev grunt-contrib-watch grunt-contrib-connect connect-livereload`

Add this basic initialization code to the top of your Gruntfile:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// This is the default port that livereload listens on;</span>
</span><span class='line'><span class="c1">// change it if you configure livereload to use another port.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">LIVERELOAD_PORT</span> <span class="o">=</span> <span class="mi">35729</span><span class="p">;</span>
</span><span class='line'><span class="c1">// lrSnippet is just a function.</span>
</span><span class='line'><span class="c1">// It&#39;s a piece of Connect middleware that injects</span>
</span><span class='line'><span class="c1">// a script into the static served html.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">lrSnippet</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;connect-livereload&#39;</span><span class="p">)({</span> <span class="nx">port</span><span class="o">:</span> <span class="nx">LIVERELOAD_PORT</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// All the middleware necessary to serve static files.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">livereloadMiddleware</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">connect</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>    <span class="c1">// Inject a livereloading script into static files.</span>
</span><span class='line'>    <span class="nx">lrSnippet</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// Serve static files.</span>
</span><span class='line'>    <span class="nx">connect</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">base</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">// Make empty directories browsable.</span>
</span><span class='line'>    <span class="nx">connect</span><span class="p">.</span><span class="nx">directory</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">base</span><span class="p">)</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

Add to your grunt.initConfig object the following two tasks configurations:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// The connect task is used to serve static files with a local server.</span>
</span><span class='line'><span class="nx">connect</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">client</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// The server&#39;s port, and the folder to serve from:</span>
</span><span class='line'>      <span class="c1">// Ex: &#39;localhost:9000&#39; would serve up &#39;client/index.html&#39;</span>
</span><span class='line'>      <span class="nx">port</span><span class="o">:</span> <span class="mi">9000</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">base</span><span class="o">:</span><span class="s1">&#39;client&#39;</span>
</span><span class='line'>      <span class="c1">// Custom middleware for the HTTP server:</span>
</span><span class='line'>      <span class="c1">// The injected JavaScript reloads the page.</span>
</span><span class='line'>      <span class="nx">middleware</span><span class="o">:</span> <span class="nx">livereloadMiddleware</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// The watch task is used to run tasks in response to file changes</span>
</span><span class='line'><span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">client</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// &#39;**&#39; is used to include all subdirectories</span>
</span><span class='line'>    <span class="c1">// and subdirectories of subdirectories, and so on, recursively.</span>
</span><span class='line'>    <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;client/**/*&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="c1">// In our case, we don&#39;t configure any additional tasks,</span>
</span><span class='line'>    <span class="c1">// since livereload is built into the watch task,</span>
</span><span class='line'>    <span class="c1">// and since the browser refresh is handled by the snippet.</span>
</span><span class='line'>    <span class="c1">// Any other tasks to run (e.g. compile CoffeeScript) go here:</span>
</span><span class='line'>    <span class="nx">tasks</span><span class="o">:</span><span class="p">[],</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">livereload</span><span class="o">:</span><span class="nx">LIVERELOAD_PORT</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

Finally, we need to run the `connect` and `watch` tasks in sequence. To save ourselves from having to type in two shell commands, we can register a task alias:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;preview&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;connect:client&#39;</span><span class="p">,</span><span class="s1">&#39;watch:client&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>

Running `grunt preview` will now run both tasks.

Some more grunt plugins to be aware about (`contrib` plugins are officially maintained):

* `grunt-contrib-uglify` for minifying your JS files. It works similarly to `grunt-contrib-concat`.
* `grunt-contrib-jshint` for running JSHint.
* `grunt contrib-coffee` for compiling CoffeeScript.
* `grunt-contrib-sass` for compiling SASS.
* `grunt-concurrent` for running tasks concurrently (instead of sequentially) - useful if you want to run multiple watch tasks concurrently.
  * If you have a series of tasks, the `watch` task must be run last. `watch` is a task that never ends until you terminate it. Thus, Grunt won&#8217;t ever reach tasks that come after `watch`.
* `grunt-nodemon` for running [nodemon](https://github.com/remy/nodemon) with your node app. This runs your node app and reloads it when files change.
* `grunt-simplemocha` for running mocha tests.
* `grunt-open` for opening files and URLs.

Some tips:

1. If your Gruntfile starts getting too unwieldy, you can break it up by using `grunt.file.readJSON()`.
2. Tired of copying and pasting `loadNpmTasks`?  Try this:
    * `npm install &#8211;save-dev matchdep`
    * use `require(&#8216;matchdep&#8217;).filterDev(&#8216;grunt-*&#8217;).forEach(grunt.loadNpmTasks);` where you would otherwise list out all your multiple `grunt.loadNpmTask` calls.

For more advanced concepts, [read the Grunt docs!](http://gruntjs.com/getting-started) They&#8217;re pretty good.]]></content>
  </entry>
  
</feed>
